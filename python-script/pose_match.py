import numpy as np
import matplotlib.pyplot as plt

a = [[186.83663940429688, 239.0448455810547, 0.9084139466285706], [216.3413543701172, 341.71685791015625, 0.7795660495758057], [171.12124633789062, 343.5345458984375, 0.640264630317688], [132.84446716308594, 441.0043640136719, 0.6041592359542847], [89.2267074584961, 491.4999084472656, 0.7290595769882202], [261.6794738769531, 340.002197265625, 0.6378543972969055], [230.34967041015625, 468.88885498046875, 0.7065910696983337], [103.1492919921875, 519.3942260742188, 0.8088056445121765], [160.66580200195312, 538.5344848632812, 0.49559733271598816], [127.576171875, 529.8104858398438, 0.39060190320014954], [4.81151819229126, 557.648681640625, 0.0937584862112999], [0.0, 0.0, 0.0], [193.78114318847656, 550.6912231445312, 0.4443814754486084], [4.8217549324035645, 601.1514282226562, 0.1317758709192276], [0.0, 0.0, 0.0], [179.84890747070312, 228.59210205078125, 0.859410285949707], [204.2641143798828, 226.78738403320312, 0.8487812280654907], [0.0, 0.0, 0.0], [246.0414581298828, 246.02381896972656, 0.882140576839447], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]]
# a = [[139.78062438964844, 49.361045837402344, 0.913029670715332], [139.7725067138672, 80.33338928222656, 0.8612523078918457], [114.53982543945312, 78.70198059082031, 0.777299165725708], [93.38299560546875, 108.87542724609375, 0.8448395729064941], [62.410118103027344, 128.40272521972656, 0.871947169303894], [163.44078063964844, 81.1362533569336, 0.7907168865203857], [183.82174682617188, 114.55126190185547, 0.8477519154548645], [211.51516723632812, 133.28170776367188, 0.8882020711898804], [138.1839599609375, 146.3318328857422, 0.7314552068710327], [121.10782623291016, 146.34071350097656, 0.7204877734184265], [119.4618148803711, 177.27381896972656, 0.7991377115249634], [129.2374725341797, 238.3691864013672, 0.7864820957183838], [153.66297912597656, 146.3275909423828, 0.7648516893386841], [176.47567749023438, 172.43727111816406, 0.83542799949646], [165.87184143066406, 236.74452209472656, 0.7824553847312927], [134.08895874023438, 43.69777297973633, 0.9057156443595886], [145.48577880859375, 44.484405517578125, 0.8522602319717407], [127.56094360351562, 49.362918853759766, 0.8909123539924622], [152.03485107421875, 49.416175842285156, 0.8718743324279785], [178.92568969726562, 257.9581298828125, 0.7007852792739868], [181.38601684570312, 255.4950714111328, 0.6230515241622925], [158.56517028808594, 238.42393493652344, 0.6337667107582092], [126.80438232421875, 261.1961975097656, 0.7283130288124084], [121.07186126708984, 257.9600830078125, 0.7088351845741272], [134.93630981445312, 239.23675537109375, 0.6318014860153198]]
b = [[159.35020446777344, 55.876590728759766, 0.929738461971283], [158.52938842773438, 87.63616180419922, 0.8587130904197693], [134.1342315673828, 86.86293029785156, 0.7975805997848511], [108.02926635742188, 114.56021881103516, 0.8921484351158142], [74.59622192382812, 119.41763305664062, 0.8190300464630127], [179.73544311523438, 87.64157104492188, 0.8173009753227234], [199.3083038330078, 120.2698974609375, 0.9178969860076904], [232.7092742919922, 127.58724975585938, 0.8431905508041382], [155.31124877929688, 147.15283203125, 0.7336069941520691], [140.6060333251953, 147.13290405273438, 0.7345303893089294], [125.93486022949219, 160.21719360351562, 0.8011744022369385], [133.28030395507812, 225.39833068847656, 0.7683090567588806], [172.3839874267578, 147.1659393310547, 0.744396448135376], [187.8705291748047, 162.6306915283203, 0.7784097790718079], [169.9661102294922, 227.0092315673828, 0.6958742737770081], [153.6840057373047, 51.02457046508789, 0.8846706748008728], [163.45204162597656, 51.00278854370117, 0.8370991349220276], [147.1469268798828, 55.082340240478516, 0.9080196022987366], [169.13690185546875, 55.090030670166016, 0.8305121660232544], [174.0481414794922, 247.34751892089844, 0.4663357436656952], [180.5415802001953, 244.9068603515625, 0.5583382844924927], [163.44140625, 231.8631591796875, 0.5767471194267273], [123.51737976074219, 252.25021362304688, 0.4680289328098297], [119.44469451904297, 250.61192321777344, 0.42188167572021484], [139.78419494628906, 231.0620880126953, 0.6412216424942017]]

a = np.array(a)
b = np.array(b)

def compare(a, b):
    a = np.array([a[9,:], a[8,:], a[12,:], a[1,:], a[2,:], a[5,:], a[0,:], a[15,:], a[16,:]])
    b = np.array([b[9,:], b[8,:], b[12,:], b[1,:], b[2,:], b[5,:], b[0,:], b[15,:], b[16,:]])

    a[np.abs(a) < 1e-10] = 0
    b[np.abs(b) < 1e-10] = 0

    def removeZeroRows(a, b):
        i = a.shape[0]-1
        while i > 0:
            if np.array_equal(a[i,:], np.array([0.0e+00,0.0e+00,0.0e+00])) or np.array_equal(b[i,:], np.array([0.0e+00,0.0e+00,0.0e+00])):
                a = np.delete(a, i, 0)
                b = np.delete(b, i, 0)
            i-=1
        return (a, b)

    (a, b) = removeZeroRows(a, b)

    pad = lambda x: np.hstack([x, np.ones((x.shape[0] ,1))])
    unpad = lambda x: x[:, :-1]

    padA = pad(a)
    padB = pad(b)

    A, res, rank, s = np.linalg.lstsq(padA, padB, rcond=None)
    A[np.abs(A) < 1e-10] = 0

    transform = unpad(np.dot(padA, A))

    tAndB = np.vstack([b, transform])
    tAndBMax = np.amax(tAndB, axis = 0)
    tAndBMin = np.amin(tAndB, axis = 0)

    def normalize(a, amax, amin):
        aNormalized = np.empty(a.shape)
        for i in range(a.shape[0]):
            for j in range(a.shape[1]):
                if (amax[j] != amin[j]):
                    aNormalized[i,j] = (a[i,j] - amin[j])/(amax[j] - amin[j])
        return aNormalized

    transformNormalized = normalize(transform, tAndBMax, tAndBMin)
    bNormalized = normalize(b, tAndBMax, tAndBMin)

    def findDistances(a, b):
        distances = np.zeros(a.shape[0])
        for i in range(0, a.shape[0]):
            distances[i] = np.linalg.norm(a[i,:] - b[i,:])
        return distances

    def unitVector(vector):
        return vector / np.linalg.norm(vector)

    def findAnglesBetweenTwoVectors1(v1, v2):
        v1_u = unitVector(v1)
        v2_u = unitVector(v2)
        return np.arccos(np.clip(np.dot(v1_u, v2_u), -1.0, 1.0))

    def findDifferenceInAngles(a, b):
        angles = []
        for i in range(0, a.shape[0]):
            for j in range(i+1, b.shape[0]):
                angles.append(np.abs(findAnglesBetweenTwoVectors1(a[i,:], a[j,:]) - findAnglesBetweenTwoVectors1(b[i,:], b[j,:])))
        return angles

    return (len([x for x in findDifferenceInAngles(bNormalized, transformNormalized) if x > 0.15]), len([x for x in findDistances(bNormalized, transformNormalized) if x > 0.2]))

# plt.plot(a.T[0], a.T[1], 'o', label="a")
# plt.plot(bNormalized.T[0], bNormalized.T[1], 'o', label="b")
# plt.plot(transformNormalized.T[0], transformNormalized.T[1], 'o', label="a on c")
# plt.show()